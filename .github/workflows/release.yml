name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            bin_name: proxmox_monitor
          - target: x86_64-apple-darwin
            os: macos-latest
            bin_name: proxmox_monitor
          - target: aarch64-apple-darwin
            os: macos-latest
            bin_name: proxmox_monitor
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            bin_name: proxmox_monitor.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install musl-tools (Linux)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt update
          sudo apt install -y musl-tools

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Copy binary
        run: |
          mkdir -p target/dist
          cp target/${{ matrix.target }}/release/${{ matrix.bin_name }} target/dist/
        if: matrix.os != 'windows-latest'

      - name: Copy binary (Windows)
        run: |
          mkdir target\dist
          Copy-Item target\${{ matrix.target }}\release\${{ matrix.bin_name }} target\dist\
        if: matrix.os == 'windows-latest'

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: target/dist/
          name: bin-${{ matrix.target }}
          if-no-files-found: error

  publish-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten binaries
        run: |
          mkdir release
          find artifacts -name "proxmox_monitor*" -exec cp {} release/ \;
          cd release
          mv proxmox_monitor* ../proxmox-monitor-linux-x64 2>/dev/null || true
          mv proxmox_monitor* ../proxmox-monitor-macos-x64 2>/dev/null || true
          mv proxmox_monitor* ../proxmox-monitor-macos-arm64 2>/dev/null || true
          mv proxmox_monitor.exe* ../proxmox-monitor-windows-x64.exe 2>/dev/null || true
          cd ..

      - name: Create ZIP
        run: |
          zip -j proxmox-monitor-v${{ github.ref_name }}.zip \
            proxmox-monitor-linux-x64 \
            proxmox-monitor-macos-x64 \
            proxmox-monitor-macos-arm64 \
            proxmox-monitor-windows-x64.exe

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ github.ref_name }} \
            --title "Release v${{ github.ref_name }}" \
            --notes "See assets for binaries." \
            --draft=false \
            proxmox-monitor-v${{ github.ref_name }}.zip
